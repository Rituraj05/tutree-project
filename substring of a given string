   #include<bits/stdc++.h>
   #include<string>
   #include<iostream>
    using namespace std;
    vector<string> pms;



    void permute(string a, int l, int r)
    {

       if (l == r) {
          pms.push_back(a);
       }
       else
      {
            for (int j = l; j <= r; j++)
            {
              swap(a[l],a[j] );
              permute(a, l+1, r);
              swap(a[l], a[j]);
            }
       }
    }




void computeLPSArray(char* pat, int M, int* lps); 
  
 
void KMPSearch(char* pat, char* txt) 
{ 
    int M = strlen(pat); 
    int N = strlen(txt); 
  
    int lps[M]; 
  
     
    computeLPSArray(pat, M, lps); 
  
    int i = 0;  
    int j = 0;  
    while (i < N) { 
        if (pat[j] == txt[i]) 
        { 
            j++; 
            i++; 
        } 
  
        if (j == M)
        {   for(int i=0;i<=sizeof(pat)-1;i++)
             {
                 cout<<pat[i];
             }
            
            cout<<" Found pattern at index  "<< i - j; 
            cout<<"\n";
            j = lps[j - 1]; 
        } 
  
         
        else if (i < N && pat[j] != txt[i])
        { 
            
            if (j != 0) 
                j = lps[j - 1]; 
            else
                i = i + 1; 
        } 
    } 
} 
  

void computeLPSArray(char* pat, int M, int* lps) 
{ 
    
    int len = 0; 
  
    lps[0] = 0;  
    int i = 1; 
    while (i < M) { 
        if (pat[i] == pat[len]) { 
            len++; 
            lps[i] = len; 
            i++; 
        } 
        else 
        { 
             
            if (len != 0) { 
                len = lps[len - 1]; 
  
                
            } 
            else 
            { 
                lps[i] = 0; 
                i++; 
            } 
        } 
    } 
} 

    int main()
    {  
	   char arr[3];
	   char txt[] = "XYYZXZYZXXYZ";
       string str;
       string a = "XYZ";
       permute(a, 0, 2);
       int i;
       for (i = 0 ; i < pms.size() ; i++) {
           
           str=pms[i];
           for(int i=0;i<sizeof(str);i++)
           {
               arr[i]=str[i];
		   }
           KMPSearch(arr, txt);
           
       }
       
       return 0;
    }
